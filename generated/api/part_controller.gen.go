// Code generated by github.com/joeriddles/gorm-oapi-codegen DO NOT EDIT.
package api

import (
  "context"

  "github.com/joeriddles/gorm-oapi-codegen-demo/generated/repository"
)

type PartController interface {
  GetPart(ctx context.Context, request GetPartRequestObject) (GetPartResponseObject, error)
  PostPart(ctx context.Context, request PostPartRequestObject) (PostPartResponseObject, error)
  DeletePartId(ctx context.Context, request DeletePartIdRequestObject) (DeletePartIdResponseObject, error)
  GetPartId(ctx context.Context, request GetPartIdRequestObject) (GetPartIdResponseObject, error)
  PutPartId(ctx context.Context, request PutPartIdRequestObject) (PutPartIdResponseObject, error)
}

type _PartController struct {
  repository repository.PartRepository
  mapper PartMapper
}

func NewPartController() PartController {
  return &_PartController{
    repository: repository.NewPartRepository(),
    mapper: NewPartMapper(),
  }
}

func (c *_PartController) GetPart(ctx context.Context, request GetPartRequestObject) (GetPartResponseObject, error) {
  parts, err := c.repository.List(ctx, map[string]interface{}{})
  if err != nil {
    return nil, err
  }

  result := []Part{}
  for _, part := range parts {
    apiPart, err := c.mapper.MapToApi(*part)
    if err != nil {
      return nil, err
    }
    result = append(result, *apiPart)
  }

  return GetPart200JSONResponse(result), nil
}

func (c *_PartController) PostPart(ctx context.Context, request PostPartRequestObject) (PostPartResponseObject, error) {
  model, err := c.mapper.MapCreate(*request.Body)
  if err != nil {
    return nil, err
  }
  if err = c.repository.Create(ctx, *model); err != nil {
    return nil, err
  }
  apiModel, err := c.mapper.MapToApi(*model)
  if err != nil {
    return nil, err
  }
  return PostPart201JSONResponse(*apiModel), nil
}

func (c *_PartController) DeletePartId(ctx context.Context, request DeletePartIdRequestObject) (DeletePartIdResponseObject, error) {
  if err := c.repository.Delete(ctx, request.Id); err != nil {
    return nil, err
  }
  return DeletePartId204Response{}, nil
}

func (c *_PartController) GetPartId(ctx context.Context, request GetPartIdRequestObject) (GetPartIdResponseObject, error) {
  model, err := c.repository.Get(ctx, request.Id)
  apiModel, err := c.mapper.MapToApi(*model)
  if err != nil {
    return nil, err
  }
  return GetPartId200JSONResponse(*apiModel), err
}

func (c *_PartController) PutPartId(ctx context.Context, request PutPartIdRequestObject) (PutPartIdResponseObject, error) {
  update, err := c.mapper.MapUpdate(*request.Body)
  if err != nil {
    return nil, err
  }
  if err := c.repository.Update(ctx, update); err != nil {
    return nil, err
  }
  return nil, nil
}
