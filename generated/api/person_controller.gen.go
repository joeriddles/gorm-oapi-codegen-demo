// Code generated by github.com/joeriddles/gorm-oapi-codegen DO NOT EDIT.
package api

import (
  "context"

  "github.com/joeriddles/cars-demo/repository"
)

type PersonController interface {
  GetPerson(ctx context.Context, request GetPersonRequestObject) (GetPersonResponseObject, error)
  PostPerson(ctx context.Context, request PostPersonRequestObject) (PostPersonResponseObject, error)
  DeletePersonId(ctx context.Context, request DeletePersonIdRequestObject) (DeletePersonIdResponseObject, error)
  GetPersonId(ctx context.Context, request GetPersonIdRequestObject) (GetPersonIdResponseObject, error)
  PutPersonId(ctx context.Context, request PutPersonIdRequestObject) (PutPersonIdResponseObject, error)
}

type _PersonController struct {
  repository repository.PersonRepository
  mapper PersonMapper
}

func NewPersonController() PersonController {
  return &_PersonController{
    repository: repository.NewPersonRepository(),
    mapper: NewPersonMapper(),
  }
}

func (c *_PersonController) GetPerson(ctx context.Context, request GetPersonRequestObject) (GetPersonResponseObject, error) {
  persons, err := c.repository.List(ctx, map[string]interface{}{})
  if err != nil {
    return nil, err
  }

  result := []Person{}
  for _, person := range persons {
    apiPerson, err := c.mapper.MapToApi(*person)
    if err != nil {
      return nil, err
    }
    result = append(result, *apiPerson)
  }

  return GetPerson200JSONResponse(result), nil
}

func (c *_PersonController) PostPerson(ctx context.Context, request PostPersonRequestObject) (PostPersonResponseObject, error) {
  model, err := c.mapper.MapCreate(*request.Body)
  if err != nil {
    return nil, err
  }
  if err = c.repository.Create(ctx, *model); err != nil {
    return nil, err
  }
  apiModel, err := c.mapper.MapToApi(*model)
  if err != nil {
    return nil, err
  }
  return PostPerson201JSONResponse(*apiModel), nil
}

func (c *_PersonController) DeletePersonId(ctx context.Context, request DeletePersonIdRequestObject) (DeletePersonIdResponseObject, error) {
  if err := c.repository.Delete(ctx, request.Id); err != nil {
    return nil, err
  }
  return DeletePersonId204Response{}, nil
}

func (c *_PersonController) GetPersonId(ctx context.Context, request GetPersonIdRequestObject) (GetPersonIdResponseObject, error) {
  model, err := c.repository.Get(ctx, request.Id)
  apiModel, err := c.mapper.MapToApi(*model)
  if err != nil {
    return nil, err
  }
  return GetPersonId200JSONResponse(*apiModel), err
}

func (c *_PersonController) PutPersonId(ctx context.Context, request PutPersonIdRequestObject) (PutPersonIdResponseObject, error) {
  update, err := c.mapper.MapUpdate(*request.Body)
  if err != nil {
    return nil, err
  }
  if err := c.repository.Update(ctx, update); err != nil {
    return nil, err
  }
  return nil, nil
}
