//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/joeriddles/gorm-oapi-codegen version v0.0.0-20240722185229-37c193bd33d7 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Manufacturers
	// (GET /manufacturer)
	GetManufacturer(w http.ResponseWriter, r *http.Request)
	// Create a new Manufacturer
	// (POST /manufacturer)
	PostManufacturer(w http.ResponseWriter, r *http.Request)
	// Delete a Manufacturer by ID
	// (DELETE /manufacturer/{id}/)
	DeleteManufacturerId(w http.ResponseWriter, r *http.Request, id Id)
	// Get a Manufacturer by ID
	// (GET /manufacturer/{id}/)
	GetManufacturerId(w http.ResponseWriter, r *http.Request, id Id)
	// Update a Manufacturer by ID
	// (PUT /manufacturer/{id}/)
	PutManufacturerId(w http.ResponseWriter, r *http.Request, id Id)
	// Get all Models
	// (GET /model)
	GetModel(w http.ResponseWriter, r *http.Request)
	// Create a new Model
	// (POST /model)
	PostModel(w http.ResponseWriter, r *http.Request)
	// Delete a Model by ID
	// (DELETE /model/{id}/)
	DeleteModelId(w http.ResponseWriter, r *http.Request, id Id)
	// Get a Model by ID
	// (GET /model/{id}/)
	GetModelId(w http.ResponseWriter, r *http.Request, id Id)
	// Update a Model by ID
	// (PUT /model/{id}/)
	PutModelId(w http.ResponseWriter, r *http.Request, id Id)
	// Get all Parts
	// (GET /part)
	GetPart(w http.ResponseWriter, r *http.Request)
	// Create a new Part
	// (POST /part)
	PostPart(w http.ResponseWriter, r *http.Request)
	// Delete a Part by ID
	// (DELETE /part/{id}/)
	DeletePartId(w http.ResponseWriter, r *http.Request, id Id)
	// Get a Part by ID
	// (GET /part/{id}/)
	GetPartId(w http.ResponseWriter, r *http.Request, id Id)
	// Update a Part by ID
	// (PUT /part/{id}/)
	PutPartId(w http.ResponseWriter, r *http.Request, id Id)
	// Get all Persons
	// (GET /person)
	GetPerson(w http.ResponseWriter, r *http.Request)
	// Create a new Person
	// (POST /person)
	PostPerson(w http.ResponseWriter, r *http.Request)
	// Delete a Person by ID
	// (DELETE /person/{id}/)
	DeletePersonId(w http.ResponseWriter, r *http.Request, id Id)
	// Get a Person by ID
	// (GET /person/{id}/)
	GetPersonId(w http.ResponseWriter, r *http.Request, id Id)
	// Update a Person by ID
	// (PUT /person/{id}/)
	PutPersonId(w http.ResponseWriter, r *http.Request, id Id)
	// Get all Vehicles
	// (GET /vehicle)
	GetVehicle(w http.ResponseWriter, r *http.Request)
	// Create a new Vehicle
	// (POST /vehicle)
	PostVehicle(w http.ResponseWriter, r *http.Request)
	// Delete a Vehicle by ID
	// (DELETE /vehicle/{id}/)
	DeleteVehicleId(w http.ResponseWriter, r *http.Request, id Id)
	// Get a Vehicle by ID
	// (GET /vehicle/{id}/)
	GetVehicleId(w http.ResponseWriter, r *http.Request, id Id)
	// Update a Vehicle by ID
	// (PUT /vehicle/{id}/)
	PutVehicleId(w http.ResponseWriter, r *http.Request, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetManufacturer operation middleware
func (siw *ServerInterfaceWrapper) GetManufacturer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetManufacturer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostManufacturer operation middleware
func (siw *ServerInterfaceWrapper) PostManufacturer(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostManufacturer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteManufacturerId operation middleware
func (siw *ServerInterfaceWrapper) DeleteManufacturerId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteManufacturerId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetManufacturerId operation middleware
func (siw *ServerInterfaceWrapper) GetManufacturerId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetManufacturerId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutManufacturerId operation middleware
func (siw *ServerInterfaceWrapper) PutManufacturerId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutManufacturerId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetModel operation middleware
func (siw *ServerInterfaceWrapper) GetModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModel(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostModel operation middleware
func (siw *ServerInterfaceWrapper) PostModel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostModel(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteModelId operation middleware
func (siw *ServerInterfaceWrapper) DeleteModelId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteModelId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetModelId operation middleware
func (siw *ServerInterfaceWrapper) GetModelId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetModelId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutModelId operation middleware
func (siw *ServerInterfaceWrapper) PutModelId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutModelId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPart operation middleware
func (siw *ServerInterfaceWrapper) GetPart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPart operation middleware
func (siw *ServerInterfaceWrapper) PostPart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePartId operation middleware
func (siw *ServerInterfaceWrapper) DeletePartId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePartId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPartId operation middleware
func (siw *ServerInterfaceWrapper) GetPartId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPartId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutPartId operation middleware
func (siw *ServerInterfaceWrapper) PutPartId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPartId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPerson operation middleware
func (siw *ServerInterfaceWrapper) GetPerson(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPerson(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostPerson operation middleware
func (siw *ServerInterfaceWrapper) PostPerson(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPerson(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePersonId operation middleware
func (siw *ServerInterfaceWrapper) DeletePersonId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePersonId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPersonId operation middleware
func (siw *ServerInterfaceWrapper) GetPersonId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPersonId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutPersonId operation middleware
func (siw *ServerInterfaceWrapper) PutPersonId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutPersonId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVehicle operation middleware
func (siw *ServerInterfaceWrapper) GetVehicle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVehicle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostVehicle operation middleware
func (siw *ServerInterfaceWrapper) PostVehicle(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostVehicle(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteVehicleId operation middleware
func (siw *ServerInterfaceWrapper) DeleteVehicleId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteVehicleId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetVehicleId operation middleware
func (siw *ServerInterfaceWrapper) GetVehicleId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVehicleId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutVehicleId operation middleware
func (siw *ServerInterfaceWrapper) PutVehicleId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutVehicleId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/manufacturer", wrapper.GetManufacturer)
	m.HandleFunc("POST "+options.BaseURL+"/manufacturer", wrapper.PostManufacturer)
	m.HandleFunc("DELETE "+options.BaseURL+"/manufacturer/{id}/", wrapper.DeleteManufacturerId)
	m.HandleFunc("GET "+options.BaseURL+"/manufacturer/{id}/", wrapper.GetManufacturerId)
	m.HandleFunc("PUT "+options.BaseURL+"/manufacturer/{id}/", wrapper.PutManufacturerId)
	m.HandleFunc("GET "+options.BaseURL+"/model", wrapper.GetModel)
	m.HandleFunc("POST "+options.BaseURL+"/model", wrapper.PostModel)
	m.HandleFunc("DELETE "+options.BaseURL+"/model/{id}/", wrapper.DeleteModelId)
	m.HandleFunc("GET "+options.BaseURL+"/model/{id}/", wrapper.GetModelId)
	m.HandleFunc("PUT "+options.BaseURL+"/model/{id}/", wrapper.PutModelId)
	m.HandleFunc("GET "+options.BaseURL+"/part", wrapper.GetPart)
	m.HandleFunc("POST "+options.BaseURL+"/part", wrapper.PostPart)
	m.HandleFunc("DELETE "+options.BaseURL+"/part/{id}/", wrapper.DeletePartId)
	m.HandleFunc("GET "+options.BaseURL+"/part/{id}/", wrapper.GetPartId)
	m.HandleFunc("PUT "+options.BaseURL+"/part/{id}/", wrapper.PutPartId)
	m.HandleFunc("GET "+options.BaseURL+"/person", wrapper.GetPerson)
	m.HandleFunc("POST "+options.BaseURL+"/person", wrapper.PostPerson)
	m.HandleFunc("DELETE "+options.BaseURL+"/person/{id}/", wrapper.DeletePersonId)
	m.HandleFunc("GET "+options.BaseURL+"/person/{id}/", wrapper.GetPersonId)
	m.HandleFunc("PUT "+options.BaseURL+"/person/{id}/", wrapper.PutPersonId)
	m.HandleFunc("GET "+options.BaseURL+"/vehicle", wrapper.GetVehicle)
	m.HandleFunc("POST "+options.BaseURL+"/vehicle", wrapper.PostVehicle)
	m.HandleFunc("DELETE "+options.BaseURL+"/vehicle/{id}/", wrapper.DeleteVehicleId)
	m.HandleFunc("GET "+options.BaseURL+"/vehicle/{id}/", wrapper.GetVehicleId)
	m.HandleFunc("PUT "+options.BaseURL+"/vehicle/{id}/", wrapper.PutVehicleId)

	return m
}

type BadRequestJSONResponse ErrorResponse

type ConflictJSONResponse ErrorResponse

type NotFoundJSONResponse ErrorResponse

type GetManufacturerRequestObject struct {
}

type GetManufacturerResponseObject interface {
	VisitGetManufacturerResponse(w http.ResponseWriter) error
}

type GetManufacturer200JSONResponse []Manufacturer

func (response GetManufacturer200JSONResponse) VisitGetManufacturerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostManufacturerRequestObject struct {
	Body *PostManufacturerJSONRequestBody
}

type PostManufacturerResponseObject interface {
	VisitPostManufacturerResponse(w http.ResponseWriter) error
}

type PostManufacturer201JSONResponse Manufacturer

func (response PostManufacturer201JSONResponse) VisitPostManufacturerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostManufacturer400JSONResponse struct{ BadRequestJSONResponse }

func (response PostManufacturer400JSONResponse) VisitPostManufacturerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostManufacturer409JSONResponse struct{ ConflictJSONResponse }

func (response PostManufacturer409JSONResponse) VisitPostManufacturerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteManufacturerIdRequestObject struct {
	Id Id `json:"id"`
}

type DeleteManufacturerIdResponseObject interface {
	VisitDeleteManufacturerIdResponse(w http.ResponseWriter) error
}

type DeleteManufacturerId204Response struct {
}

func (response DeleteManufacturerId204Response) VisitDeleteManufacturerIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteManufacturerId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteManufacturerId404JSONResponse) VisitDeleteManufacturerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetManufacturerIdRequestObject struct {
	Id Id `json:"id"`
}

type GetManufacturerIdResponseObject interface {
	VisitGetManufacturerIdResponse(w http.ResponseWriter) error
}

type GetManufacturerId200JSONResponse Manufacturer

func (response GetManufacturerId200JSONResponse) VisitGetManufacturerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetManufacturerId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetManufacturerId404JSONResponse) VisitGetManufacturerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutManufacturerIdRequestObject struct {
	Id   Id `json:"id"`
	Body *PutManufacturerIdJSONRequestBody
}

type PutManufacturerIdResponseObject interface {
	VisitPutManufacturerIdResponse(w http.ResponseWriter) error
}

type PutManufacturerId204Response struct {
}

func (response PutManufacturerId204Response) VisitPutManufacturerIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutManufacturerId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutManufacturerId404JSONResponse) VisitPutManufacturerIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetModelRequestObject struct {
}

type GetModelResponseObject interface {
	VisitGetModelResponse(w http.ResponseWriter) error
}

type GetModel200JSONResponse []Model

func (response GetModel200JSONResponse) VisitGetModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostModelRequestObject struct {
	Body *PostModelJSONRequestBody
}

type PostModelResponseObject interface {
	VisitPostModelResponse(w http.ResponseWriter) error
}

type PostModel201JSONResponse Model

func (response PostModel201JSONResponse) VisitPostModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostModel400JSONResponse struct{ BadRequestJSONResponse }

func (response PostModel400JSONResponse) VisitPostModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostModel409JSONResponse struct{ ConflictJSONResponse }

func (response PostModel409JSONResponse) VisitPostModelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteModelIdRequestObject struct {
	Id Id `json:"id"`
}

type DeleteModelIdResponseObject interface {
	VisitDeleteModelIdResponse(w http.ResponseWriter) error
}

type DeleteModelId204Response struct {
}

func (response DeleteModelId204Response) VisitDeleteModelIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteModelId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteModelId404JSONResponse) VisitDeleteModelIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetModelIdRequestObject struct {
	Id Id `json:"id"`
}

type GetModelIdResponseObject interface {
	VisitGetModelIdResponse(w http.ResponseWriter) error
}

type GetModelId200JSONResponse Model

func (response GetModelId200JSONResponse) VisitGetModelIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetModelId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetModelId404JSONResponse) VisitGetModelIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutModelIdRequestObject struct {
	Id   Id `json:"id"`
	Body *PutModelIdJSONRequestBody
}

type PutModelIdResponseObject interface {
	VisitPutModelIdResponse(w http.ResponseWriter) error
}

type PutModelId204Response struct {
}

func (response PutModelId204Response) VisitPutModelIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutModelId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutModelId404JSONResponse) VisitPutModelIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPartRequestObject struct {
}

type GetPartResponseObject interface {
	VisitGetPartResponse(w http.ResponseWriter) error
}

type GetPart200JSONResponse []Part

func (response GetPart200JSONResponse) VisitGetPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPartRequestObject struct {
	Body *PostPartJSONRequestBody
}

type PostPartResponseObject interface {
	VisitPostPartResponse(w http.ResponseWriter) error
}

type PostPart201JSONResponse Part

func (response PostPart201JSONResponse) VisitPostPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPart400JSONResponse struct{ BadRequestJSONResponse }

func (response PostPart400JSONResponse) VisitPostPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPart409JSONResponse struct{ ConflictJSONResponse }

func (response PostPart409JSONResponse) VisitPostPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeletePartIdRequestObject struct {
	Id Id `json:"id"`
}

type DeletePartIdResponseObject interface {
	VisitDeletePartIdResponse(w http.ResponseWriter) error
}

type DeletePartId204Response struct {
}

func (response DeletePartId204Response) VisitDeletePartIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePartId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeletePartId404JSONResponse) VisitDeletePartIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPartIdRequestObject struct {
	Id Id `json:"id"`
}

type GetPartIdResponseObject interface {
	VisitGetPartIdResponse(w http.ResponseWriter) error
}

type GetPartId200JSONResponse Part

func (response GetPartId200JSONResponse) VisitGetPartIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPartId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPartId404JSONResponse) VisitGetPartIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPartIdRequestObject struct {
	Id   Id `json:"id"`
	Body *PutPartIdJSONRequestBody
}

type PutPartIdResponseObject interface {
	VisitPutPartIdResponse(w http.ResponseWriter) error
}

type PutPartId204Response struct {
}

func (response PutPartId204Response) VisitPutPartIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutPartId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutPartId404JSONResponse) VisitPutPartIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPersonRequestObject struct {
}

type GetPersonResponseObject interface {
	VisitGetPersonResponse(w http.ResponseWriter) error
}

type GetPerson200JSONResponse []Person

func (response GetPerson200JSONResponse) VisitGetPersonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPersonRequestObject struct {
	Body *PostPersonJSONRequestBody
}

type PostPersonResponseObject interface {
	VisitPostPersonResponse(w http.ResponseWriter) error
}

type PostPerson201JSONResponse Person

func (response PostPerson201JSONResponse) VisitPostPersonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostPerson400JSONResponse struct{ BadRequestJSONResponse }

func (response PostPerson400JSONResponse) VisitPostPersonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostPerson409JSONResponse struct{ ConflictJSONResponse }

func (response PostPerson409JSONResponse) VisitPostPersonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeletePersonIdRequestObject struct {
	Id Id `json:"id"`
}

type DeletePersonIdResponseObject interface {
	VisitDeletePersonIdResponse(w http.ResponseWriter) error
}

type DeletePersonId204Response struct {
}

func (response DeletePersonId204Response) VisitDeletePersonIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePersonId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeletePersonId404JSONResponse) VisitDeletePersonIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPersonIdRequestObject struct {
	Id Id `json:"id"`
}

type GetPersonIdResponseObject interface {
	VisitGetPersonIdResponse(w http.ResponseWriter) error
}

type GetPersonId200JSONResponse Person

func (response GetPersonId200JSONResponse) VisitGetPersonIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPersonId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPersonId404JSONResponse) VisitGetPersonIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutPersonIdRequestObject struct {
	Id   Id `json:"id"`
	Body *PutPersonIdJSONRequestBody
}

type PutPersonIdResponseObject interface {
	VisitPutPersonIdResponse(w http.ResponseWriter) error
}

type PutPersonId204Response struct {
}

func (response PutPersonId204Response) VisitPutPersonIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutPersonId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutPersonId404JSONResponse) VisitPutPersonIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVehicleRequestObject struct {
}

type GetVehicleResponseObject interface {
	VisitGetVehicleResponse(w http.ResponseWriter) error
}

type GetVehicle200JSONResponse []Vehicle

func (response GetVehicle200JSONResponse) VisitGetVehicleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostVehicleRequestObject struct {
	Body *PostVehicleJSONRequestBody
}

type PostVehicleResponseObject interface {
	VisitPostVehicleResponse(w http.ResponseWriter) error
}

type PostVehicle201JSONResponse Vehicle

func (response PostVehicle201JSONResponse) VisitPostVehicleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostVehicle400JSONResponse struct{ BadRequestJSONResponse }

func (response PostVehicle400JSONResponse) VisitPostVehicleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostVehicle409JSONResponse struct{ ConflictJSONResponse }

func (response PostVehicle409JSONResponse) VisitPostVehicleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteVehicleIdRequestObject struct {
	Id Id `json:"id"`
}

type DeleteVehicleIdResponseObject interface {
	VisitDeleteVehicleIdResponse(w http.ResponseWriter) error
}

type DeleteVehicleId204Response struct {
}

func (response DeleteVehicleId204Response) VisitDeleteVehicleIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteVehicleId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteVehicleId404JSONResponse) VisitDeleteVehicleIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVehicleIdRequestObject struct {
	Id Id `json:"id"`
}

type GetVehicleIdResponseObject interface {
	VisitGetVehicleIdResponse(w http.ResponseWriter) error
}

type GetVehicleId200JSONResponse Vehicle

func (response GetVehicleId200JSONResponse) VisitGetVehicleIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVehicleId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVehicleId404JSONResponse) VisitGetVehicleIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutVehicleIdRequestObject struct {
	Id   Id `json:"id"`
	Body *PutVehicleIdJSONRequestBody
}

type PutVehicleIdResponseObject interface {
	VisitPutVehicleIdResponse(w http.ResponseWriter) error
}

type PutVehicleId204Response struct {
}

func (response PutVehicleId204Response) VisitPutVehicleIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PutVehicleId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutVehicleId404JSONResponse) VisitPutVehicleIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all Manufacturers
	// (GET /manufacturer)
	GetManufacturer(ctx context.Context, request GetManufacturerRequestObject) (GetManufacturerResponseObject, error)
	// Create a new Manufacturer
	// (POST /manufacturer)
	PostManufacturer(ctx context.Context, request PostManufacturerRequestObject) (PostManufacturerResponseObject, error)
	// Delete a Manufacturer by ID
	// (DELETE /manufacturer/{id}/)
	DeleteManufacturerId(ctx context.Context, request DeleteManufacturerIdRequestObject) (DeleteManufacturerIdResponseObject, error)
	// Get a Manufacturer by ID
	// (GET /manufacturer/{id}/)
	GetManufacturerId(ctx context.Context, request GetManufacturerIdRequestObject) (GetManufacturerIdResponseObject, error)
	// Update a Manufacturer by ID
	// (PUT /manufacturer/{id}/)
	PutManufacturerId(ctx context.Context, request PutManufacturerIdRequestObject) (PutManufacturerIdResponseObject, error)
	// Get all Models
	// (GET /model)
	GetModel(ctx context.Context, request GetModelRequestObject) (GetModelResponseObject, error)
	// Create a new Model
	// (POST /model)
	PostModel(ctx context.Context, request PostModelRequestObject) (PostModelResponseObject, error)
	// Delete a Model by ID
	// (DELETE /model/{id}/)
	DeleteModelId(ctx context.Context, request DeleteModelIdRequestObject) (DeleteModelIdResponseObject, error)
	// Get a Model by ID
	// (GET /model/{id}/)
	GetModelId(ctx context.Context, request GetModelIdRequestObject) (GetModelIdResponseObject, error)
	// Update a Model by ID
	// (PUT /model/{id}/)
	PutModelId(ctx context.Context, request PutModelIdRequestObject) (PutModelIdResponseObject, error)
	// Get all Parts
	// (GET /part)
	GetPart(ctx context.Context, request GetPartRequestObject) (GetPartResponseObject, error)
	// Create a new Part
	// (POST /part)
	PostPart(ctx context.Context, request PostPartRequestObject) (PostPartResponseObject, error)
	// Delete a Part by ID
	// (DELETE /part/{id}/)
	DeletePartId(ctx context.Context, request DeletePartIdRequestObject) (DeletePartIdResponseObject, error)
	// Get a Part by ID
	// (GET /part/{id}/)
	GetPartId(ctx context.Context, request GetPartIdRequestObject) (GetPartIdResponseObject, error)
	// Update a Part by ID
	// (PUT /part/{id}/)
	PutPartId(ctx context.Context, request PutPartIdRequestObject) (PutPartIdResponseObject, error)
	// Get all Persons
	// (GET /person)
	GetPerson(ctx context.Context, request GetPersonRequestObject) (GetPersonResponseObject, error)
	// Create a new Person
	// (POST /person)
	PostPerson(ctx context.Context, request PostPersonRequestObject) (PostPersonResponseObject, error)
	// Delete a Person by ID
	// (DELETE /person/{id}/)
	DeletePersonId(ctx context.Context, request DeletePersonIdRequestObject) (DeletePersonIdResponseObject, error)
	// Get a Person by ID
	// (GET /person/{id}/)
	GetPersonId(ctx context.Context, request GetPersonIdRequestObject) (GetPersonIdResponseObject, error)
	// Update a Person by ID
	// (PUT /person/{id}/)
	PutPersonId(ctx context.Context, request PutPersonIdRequestObject) (PutPersonIdResponseObject, error)
	// Get all Vehicles
	// (GET /vehicle)
	GetVehicle(ctx context.Context, request GetVehicleRequestObject) (GetVehicleResponseObject, error)
	// Create a new Vehicle
	// (POST /vehicle)
	PostVehicle(ctx context.Context, request PostVehicleRequestObject) (PostVehicleResponseObject, error)
	// Delete a Vehicle by ID
	// (DELETE /vehicle/{id}/)
	DeleteVehicleId(ctx context.Context, request DeleteVehicleIdRequestObject) (DeleteVehicleIdResponseObject, error)
	// Get a Vehicle by ID
	// (GET /vehicle/{id}/)
	GetVehicleId(ctx context.Context, request GetVehicleIdRequestObject) (GetVehicleIdResponseObject, error)
	// Update a Vehicle by ID
	// (PUT /vehicle/{id}/)
	PutVehicleId(ctx context.Context, request PutVehicleIdRequestObject) (PutVehicleIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetManufacturer operation middleware
func (sh *strictHandler) GetManufacturer(w http.ResponseWriter, r *http.Request) {
	var request GetManufacturerRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetManufacturer(ctx, request.(GetManufacturerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetManufacturer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetManufacturerResponseObject); ok {
		if err := validResponse.VisitGetManufacturerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostManufacturer operation middleware
func (sh *strictHandler) PostManufacturer(w http.ResponseWriter, r *http.Request) {
	var request PostManufacturerRequestObject

	var body PostManufacturerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostManufacturer(ctx, request.(PostManufacturerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostManufacturer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostManufacturerResponseObject); ok {
		if err := validResponse.VisitPostManufacturerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteManufacturerId operation middleware
func (sh *strictHandler) DeleteManufacturerId(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteManufacturerIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteManufacturerId(ctx, request.(DeleteManufacturerIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteManufacturerId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteManufacturerIdResponseObject); ok {
		if err := validResponse.VisitDeleteManufacturerIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetManufacturerId operation middleware
func (sh *strictHandler) GetManufacturerId(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetManufacturerIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetManufacturerId(ctx, request.(GetManufacturerIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetManufacturerId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetManufacturerIdResponseObject); ok {
		if err := validResponse.VisitGetManufacturerIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutManufacturerId operation middleware
func (sh *strictHandler) PutManufacturerId(w http.ResponseWriter, r *http.Request, id Id) {
	var request PutManufacturerIdRequestObject

	request.Id = id

	var body PutManufacturerIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutManufacturerId(ctx, request.(PutManufacturerIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutManufacturerId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutManufacturerIdResponseObject); ok {
		if err := validResponse.VisitPutManufacturerIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetModel operation middleware
func (sh *strictHandler) GetModel(w http.ResponseWriter, r *http.Request) {
	var request GetModelRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetModel(ctx, request.(GetModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetModel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetModelResponseObject); ok {
		if err := validResponse.VisitGetModelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostModel operation middleware
func (sh *strictHandler) PostModel(w http.ResponseWriter, r *http.Request) {
	var request PostModelRequestObject

	var body PostModelJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostModel(ctx, request.(PostModelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostModel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostModelResponseObject); ok {
		if err := validResponse.VisitPostModelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteModelId operation middleware
func (sh *strictHandler) DeleteModelId(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteModelIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteModelId(ctx, request.(DeleteModelIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteModelId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteModelIdResponseObject); ok {
		if err := validResponse.VisitDeleteModelIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetModelId operation middleware
func (sh *strictHandler) GetModelId(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetModelIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetModelId(ctx, request.(GetModelIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetModelId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetModelIdResponseObject); ok {
		if err := validResponse.VisitGetModelIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutModelId operation middleware
func (sh *strictHandler) PutModelId(w http.ResponseWriter, r *http.Request, id Id) {
	var request PutModelIdRequestObject

	request.Id = id

	var body PutModelIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutModelId(ctx, request.(PutModelIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutModelId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutModelIdResponseObject); ok {
		if err := validResponse.VisitPutModelIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPart operation middleware
func (sh *strictHandler) GetPart(w http.ResponseWriter, r *http.Request) {
	var request GetPartRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPart(ctx, request.(GetPartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPartResponseObject); ok {
		if err := validResponse.VisitGetPartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPart operation middleware
func (sh *strictHandler) PostPart(w http.ResponseWriter, r *http.Request) {
	var request PostPartRequestObject

	var body PostPartJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPart(ctx, request.(PostPartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPartResponseObject); ok {
		if err := validResponse.VisitPostPartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePartId operation middleware
func (sh *strictHandler) DeletePartId(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeletePartIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePartId(ctx, request.(DeletePartIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePartId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePartIdResponseObject); ok {
		if err := validResponse.VisitDeletePartIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPartId operation middleware
func (sh *strictHandler) GetPartId(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetPartIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPartId(ctx, request.(GetPartIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPartId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPartIdResponseObject); ok {
		if err := validResponse.VisitGetPartIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPartId operation middleware
func (sh *strictHandler) PutPartId(w http.ResponseWriter, r *http.Request, id Id) {
	var request PutPartIdRequestObject

	request.Id = id

	var body PutPartIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPartId(ctx, request.(PutPartIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPartId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPartIdResponseObject); ok {
		if err := validResponse.VisitPutPartIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPerson operation middleware
func (sh *strictHandler) GetPerson(w http.ResponseWriter, r *http.Request) {
	var request GetPersonRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPerson(ctx, request.(GetPersonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPerson")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPersonResponseObject); ok {
		if err := validResponse.VisitGetPersonResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostPerson operation middleware
func (sh *strictHandler) PostPerson(w http.ResponseWriter, r *http.Request) {
	var request PostPersonRequestObject

	var body PostPersonJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostPerson(ctx, request.(PostPersonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPerson")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostPersonResponseObject); ok {
		if err := validResponse.VisitPostPersonResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePersonId operation middleware
func (sh *strictHandler) DeletePersonId(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeletePersonIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePersonId(ctx, request.(DeletePersonIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePersonId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePersonIdResponseObject); ok {
		if err := validResponse.VisitDeletePersonIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPersonId operation middleware
func (sh *strictHandler) GetPersonId(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetPersonIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPersonId(ctx, request.(GetPersonIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPersonId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPersonIdResponseObject); ok {
		if err := validResponse.VisitGetPersonIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutPersonId operation middleware
func (sh *strictHandler) PutPersonId(w http.ResponseWriter, r *http.Request, id Id) {
	var request PutPersonIdRequestObject

	request.Id = id

	var body PutPersonIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutPersonId(ctx, request.(PutPersonIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutPersonId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutPersonIdResponseObject); ok {
		if err := validResponse.VisitPutPersonIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVehicle operation middleware
func (sh *strictHandler) GetVehicle(w http.ResponseWriter, r *http.Request) {
	var request GetVehicleRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVehicle(ctx, request.(GetVehicleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVehicle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVehicleResponseObject); ok {
		if err := validResponse.VisitGetVehicleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostVehicle operation middleware
func (sh *strictHandler) PostVehicle(w http.ResponseWriter, r *http.Request) {
	var request PostVehicleRequestObject

	var body PostVehicleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostVehicle(ctx, request.(PostVehicleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostVehicle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostVehicleResponseObject); ok {
		if err := validResponse.VisitPostVehicleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteVehicleId operation middleware
func (sh *strictHandler) DeleteVehicleId(w http.ResponseWriter, r *http.Request, id Id) {
	var request DeleteVehicleIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteVehicleId(ctx, request.(DeleteVehicleIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteVehicleId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteVehicleIdResponseObject); ok {
		if err := validResponse.VisitDeleteVehicleIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVehicleId operation middleware
func (sh *strictHandler) GetVehicleId(w http.ResponseWriter, r *http.Request, id Id) {
	var request GetVehicleIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVehicleId(ctx, request.(GetVehicleIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVehicleId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVehicleIdResponseObject); ok {
		if err := validResponse.VisitGetVehicleIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutVehicleId operation middleware
func (sh *strictHandler) PutVehicleId(w http.ResponseWriter, r *http.Request, id Id) {
	var request PutVehicleIdRequestObject

	request.Id = id

	var body PutVehicleIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutVehicleId(ctx, request.(PutVehicleIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutVehicleId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutVehicleIdResponseObject); ok {
		if err := validResponse.VisitPutVehicleIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xaXW/bNhf+KwTfF9iNU7tbMGC+a9NtCIa0Qbv1pggKRjq2WUikSlLpjED/fSCpb4qS",
	"DNuKoavIMnU+nnPO81B0nnHA44QzYEri9TMWIBPOJJgPb0n4Eb6nIJX+FHCmgJlLkiQRDYiinC2/Sc70",
	"PRnsICb66v8CNniN/7esTC/tt3L5uxBcfMyd4CzLFjgEGQiaaGN4rX0iYZ2iK3RjfUrEN0jtoPyGCEAp",
	"g38TCBSEOFvgG842EQ0mjLTwiK7QhwSE8YF+8DTSCcg0UogyfcVTEQAK8tVSB/ueqz94ysLpgn3PFTIu",
	"0RX6lEBANxTCenQ6bMYVegQU8YAYVLNF7t50w40AouCOsHRDApUKEPpuIngCQlHbMYzEoP+qfQJ4jaUS",
	"lG11xk+wo0FkF1EFsRzK6I6HEOknc1NECLI3IekeoAJCvP5i/dWsP5Tr+eM3CJTpDBu3secEHLfS6Q2p",
	"vjZbNJ79SsNa3pQp2NpFXkQSItR4OO6JUGPRaMfVvIML136sjDMHqoBbHnBzjDW2R5fWi1V3liac0ndP",
	"MiDyURrVql3O/MY/28ZzrSel196q2lW6G8yVt4vyBv8aF108Ct/GU37blA3joBd1GGxHVk+kuO6Er0lY",
	"Hb0WmrtNEvt7Bwj0g0h//5NEKaPfU0A0BKY0o+nmdgYtBinJdoy5EBShEYQofwQlgj/RkLItomzDRWw5",
	"njzyVCGqJEQb12ELOJNJFUQXFv2UasvWV28a9hLNmajXVHgM/3qYd2xes2LoOmhH0PShBD0a60mJvA7G",
	"MJv7ePzI+fDG1BXDP0l4EVsgX2Az3eN40r28bYov0IO3IB5Ds95uODl7sx078nPbhNkN14l3Yjai5s7o",
	"TbWzQoojAYkACUwhUr4y4gW2OyKbx6/Xmr0po3Ea4/Vq4aSoc9GbKJMlVbqs+E9g+r0ZQvTm/tZkIKQN",
	"4PWr1auVjo4nwEhC8Rr/Ym5pTlE70wXLNq9twQw+L17Gb0PjQ901ZbVxxPHzanXQS/g45miRaIvQnJfz",
	"T2kQgJT2hTuNYyL2NnJEogjVrUm93yRbqbuhkf6Dbt+c+ZoA3HPpImBOUd7ycH+yE4iO04Gs2b9KpJA5",
	"8L8+WQSu79Z5jYnQEMO1rXqXtTK8Ze30yzzy2/Aj5SFUs5LWMyKIwQ/UqoWnmtmi2d/LZxpmSzupEShw",
	"6/zO3K9bvw3tJpLEoHTrrL88Y00zZoSKbc7askqzTIuRkGuazR6cml67jGKjy8G/HkayPCFrImnNINJA",
	"ET3u0e27vskYwwwvhtZqsgn48Nex+BtOOhD8JO1ipfTFwD8993W8Fozivo45saaOnhNr5sBSGc4p9jbe",
	"kcl3FxOoqOf151D5tLv+WtbG7oBgllmeTSltdhNLZOX0MrUxh71dqrIzR8ugXjxr/dMJugNdtnbv+M5B",
	"6nydfDKNGwDYq2pTA3w2ORtPUFPoWG85ND8k+WmQr/PNadEUuuU5xjpQtu7N0VmVqkmvX7TKDM+lWTaz",
	"aSWr8nmRipVj3qpS0Y9j5UpbmbNa6fyc4S07um9iZyBVvg4+lVL1g+vTqanBPZdMjeekCVSqrxSGE8oD",
	"aW/P2xWT6FR57n2kUhk7Da3KT5v71arK9Gx6lWc4sWLVvF6mZhXIO/WqenS0cpnVs9Yuk6E71VWP98/y",
	"HBTM29En07BBkL06NjnIZ1OyA9hqCi0bKInmiqfqF1rfEBQ/4k6haIWvoyXtc/GvGlXeRar9olbP9lyq",
	"VmY5raw13F6krlXgu0WrdetYacvNzVnb8hSdIa83+8Bgz0Deejr7VPo2Bmifwr0A0OeSuIOoawKNGy5L",
	"lmX/BQAA//900eLWIzMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
