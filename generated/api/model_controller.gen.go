// Code generated by github.com/joeriddles/gorm-oapi-codegen DO NOT EDIT.
package api

import (
  "context"

  "github.com/joeriddles/gorm-oapi-codegen-demo/generated/repository"
)

type ModelController interface {
  GetModel(ctx context.Context, request GetModelRequestObject) (GetModelResponseObject, error)
  PostModel(ctx context.Context, request PostModelRequestObject) (PostModelResponseObject, error)
  DeleteModelId(ctx context.Context, request DeleteModelIdRequestObject) (DeleteModelIdResponseObject, error)
  GetModelId(ctx context.Context, request GetModelIdRequestObject) (GetModelIdResponseObject, error)
  PutModelId(ctx context.Context, request PutModelIdRequestObject) (PutModelIdResponseObject, error)
}

type _ModelController struct {
  repository repository.ModelRepository
  mapper ModelMapper
}

func NewModelController() ModelController {
  return &_ModelController{
    repository: repository.NewModelRepository(),
    mapper: NewModelMapper(),
  }
}

func (c *_ModelController) GetModel(ctx context.Context, request GetModelRequestObject) (GetModelResponseObject, error) {
  models, err := c.repository.List(ctx, map[string]interface{}{})
  if err != nil {
    return nil, err
  }

  result := []Model{}
  for _, model := range models {
    apiModel, err := c.mapper.MapToApi(*model)
    if err != nil {
      return nil, err
    }
    result = append(result, *apiModel)
  }

  return GetModel200JSONResponse(result), nil
}

func (c *_ModelController) PostModel(ctx context.Context, request PostModelRequestObject) (PostModelResponseObject, error) {
  model, err := c.mapper.MapCreate(*request.Body)
  if err != nil {
    return nil, err
  }
  if err = c.repository.Create(ctx, *model); err != nil {
    return nil, err
  }
  apiModel, err := c.mapper.MapToApi(*model)
  if err != nil {
    return nil, err
  }
  return PostModel201JSONResponse(*apiModel), nil
}

func (c *_ModelController) DeleteModelId(ctx context.Context, request DeleteModelIdRequestObject) (DeleteModelIdResponseObject, error) {
  if err := c.repository.Delete(ctx, request.Id); err != nil {
    return nil, err
  }
  return DeleteModelId204Response{}, nil
}

func (c *_ModelController) GetModelId(ctx context.Context, request GetModelIdRequestObject) (GetModelIdResponseObject, error) {
  model, err := c.repository.Get(ctx, request.Id)
  apiModel, err := c.mapper.MapToApi(*model)
  if err != nil {
    return nil, err
  }
  return GetModelId200JSONResponse(*apiModel), err
}

func (c *_ModelController) PutModelId(ctx context.Context, request PutModelIdRequestObject) (PutModelIdResponseObject, error) {
  update, err := c.mapper.MapUpdate(*request.Body)
  if err != nil {
    return nil, err
  }
  if err := c.repository.Update(ctx, update); err != nil {
    return nil, err
  }
  return nil, nil
}
